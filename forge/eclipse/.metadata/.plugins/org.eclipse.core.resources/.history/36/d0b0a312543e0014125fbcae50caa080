package com.parmandorc.LearningMobs.Fighter;

import java.util.List;

import com.parmandorc.LearningMobs.EntityLearningMob;
import com.parmandorc.LearningMobs.AI.LMAIBase;
import com.parmandorc.LearningMobs.AI.MoveAwayFromTarget;
import com.parmandorc.LearningMobs.AI.MoveTowardsTarget;

import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
import net.minecraft.entity.ai.EntityAISwimming;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.world.World;

public class EntityLMFighter extends EntityLearningMob 
{
	final int totalLMTasks = 2;
	final int moveTowards = 1;
	final int moveAway = 2;
	
	public EntityLMFighter(World p_i1738_1_) 
	{
		super(p_i1738_1_);
		this.setSize(0.9F, 1.3F);
		
		LMTasks = new LMAIBase[totalLMTasks + 1];
		LMTasks[moveTowards] = new MoveTowardsTarget(this, 1.35);
		LMTasks[moveAway] = new MoveAwayFromTarget(this, 1.35);
	}

	@Override
    protected void applyEntityAttributes()
    {
        super.applyEntityAttributes();
        this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setBaseValue(10.0D);
        this.getEntityAttribute(SharedMonsterAttributes.followRange).setBaseValue(30.0D);
        this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0.20000000298023224D);
    }
	
	protected boolean isAIEnabled()
	{
		return true;
	}
	
	protected void updateAITick()
	{
		if (currentTask == 0)
		{
			if (nextTask != 0)
			{
				currentTask = nextTask;
				this.tasks.addTask(5, getCurrentTask());
			}
		}
		else if (getCurrentTask().hasFinished())
		{
			if (currentTask == nextTask)
			{
				getCurrentTask().reset();
			}
			else
			{
				this.tasks.removeTask(getCurrentTask());
				currentTask = nextTask;
				this.tasks.addTask(5, getCurrentTask());
			}
		}
		System.out.println(this.getEntityAttribute(SharedMonsterAttributes.followRange).getAttributeValue() + " " + this.getEntityAttribute(SharedMonsterAttributes.followRange).getBaseValue());

	}
	
	protected boolean interact(EntityPlayer p_70085_1_)
	{
		ItemStack itemstack = p_70085_1_.getCurrentEquippedItem();

        if (itemstack != null && itemstack.getItem() == Items.stick)
        {
        	switch(currentTask)
        	{
        	case moveTowards:
        		nextTask = moveAway;
        		break;
        		
        	case moveAway:
        		nextTask = moveTowards;
        		break;
        	
        	default:
        		nextTask = moveTowards;
        	}
        	
        	return true;
        	
        }
		return false;
	}
}
